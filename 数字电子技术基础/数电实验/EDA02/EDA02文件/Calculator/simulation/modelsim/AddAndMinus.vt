// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/18/2022 13:12:14"
                                                                                
// Verilog Test Bench template for design : AddAndMinus
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module AddAndMinus_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;

reg [3:0] A,B;
wire [3:0] S;
wire Symbol;
integer i,j,a,b,s;

// assign statements (if any)                          
AddAndMinus i1 (
// port map - connection between master ports and signals/registers   
	.A0(A[0]),
	.A1(A[1]),
	.A2(A[2]),
	.A3(A[3]),
	.B0(B[0]),
	.B1(B[1]),
	.B2(B[2]),
	.B3(B[3]),
	.S0(S[0]),
	.S1(S[1]),
	.S2(S[2]),
	.S3(S[3]),
	.Symbol(Symbol)
);
initial 
begin                                                  
  A = 0; 
  B = 0; 
  eachvec=0;
  for(i=0;i<16;i=i+1)
   begin
    #1000
	 A=i;
	for(j=0;j<16;j=j+1)
	begin
    #1000
	 B=j;
	 #1
	 a = ((A[3]==0)?1:-1)*(A[2]*4+A[1]*2+A[0]);
    b = ((B[3]==0)?1:-1)*(B[2]*4+B[1]*2+B[0]);
    s = ((Symbol==0)?1:-1)*(S[3]*8+S[2]*4+S[1]*2+S[0]);
	 if(a+b != s) $display("ERROR");
   end
  end
end

initial
begin
 $monitor("%d + %d = %d",a,b,s);
 #1000000
 $finish;
end                                                            
endmodule

